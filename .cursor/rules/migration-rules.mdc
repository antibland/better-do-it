# Database Migration Rules

## **CRITICAL: Follow the Bulletproof Migration Process**

**NEVER create direct SQL migration files** - they can cause data loss and business failure.

### **1. Reference migration-process.md**

- **ALWAYS** reference `docs/migration-process.md` for the complete bulletproof process
- This document contains the step-by-step process that prevents database disasters
- Follow it exactly, every time, no exceptions

### **2. Use Safe Migration Endpoints**

- **ALWAYS** use `/api/migrate-[feature]` for database schema changes
- Migration endpoints handle both PostgreSQL (production) and SQLite (development)
- They are idempotent and data-loss-free - can be run multiple times safely

### **3. Follow the Established Pattern**

When adding new columns, follow this exact pattern from `docs/migration-process.md`:

1. **Create migration endpoint** with full validation
2. **Test locally** (MANDATORY)
3. **Deploy migration endpoint**
4. **Run production migration**
5. **Verify migration succeeded**
6. **Deploy application code**

### **4. Use Migration Scripts**

- Use `scripts/migration-safety.js` for safety checks
- Use `scripts/run-migration.sh` for convenient migration execution
- Verify schema consistency with `/api/check-schema` endpoint after migrations

## **What NOT to Do**

❌ **NEVER create `.sql` migration files**
❌ **NEVER use direct database commands**
❌ **NEVER assume column names are the same across environments**
❌ **NEVER skip environment testing**
❌ **NEVER deploy code before running migrations**

## **What TO Do**

✅ **ALWAYS use the migration endpoint**
✅ **ALWAYS follow the bulletproof process**
✅ **ALWAYS test in both environments**
✅ **ALWAYS verify schema consistency**
✅ **ALWAYS use the transformation layer**

## **Quick Reference**

```bash
# Run migration safety check
node scripts/migration-safety.js

# Run migration (production)
curl -X POST https://better-do-it.vercel.app/api/migrate-[feature] | jq

# Check schema
curl -s https://better-do-it.vercel.app/api/check-schema | jq
```

## **Why This Rule Exists**

The old `migrate-sort-order.sql` file was removed because:

- It caused data loss and database corruption
- It didn't handle environment differences properly
- It wasn't idempotent (couldn't be run safely multiple times)
- It lacked proper error handling and feedback
- It nearly destroyed the production database

The new migration endpoint solves all these problems and provides a safe, consistent way to handle database changes across both development and production environments.

**Reference: See `docs/migration-process.md` for the complete bulletproof migration process.**
description:
globs:
alwaysApply: true

---
